from datetime import date, datetime, time
from decimal import Decimal

from django.test import TestCase
from django.db.models.fields import FieldDoesNotExist
from django.utils.encoding import smart_unicode

from models import Person, MostFieldTypes, WeekDay, Sentence, SentenceFreq

class CompositeFieldTests(TestCase):

    def setUp(self):
        self.p1 = Person.objects.create(
            first_name='John', last_name='Lennon', birthday=date(1940, 10, 9)
        )
        self.p2 = Person.objects.create(
            first_name='George', last_name='Harrison', birthday=date(1943, 2, 25)
        )
        Person.objects.create(
            first_name='Paul', last_name='McCartney', birthday=date(1942, 6, 18)
        )
        Person.objects.create(
            first_name='Ringo', last_name='Starr', birthday=date(1940, 7, 7)
        )

    def test_cf_retrieval(self):
        name1 = self.p1.full_name
        self.assertEqual(name1.first_name, 'John')
        self.assertEqual(name1.last_name, self.p1.last_name)

        self.assertEqual(self.p2.full_name.first_name, self.p2.first_name)
        self.assertEqual(self.p2.full_name.last_name, 'Harrison')

    def test_cf_assignment(self):
        self.p1.full_name = ('Keith', 'Sanderson')
        self.assertEqual(self.p1.first_name, 'Keith')
        self.assertEqual(self.p1.last_name, 'Sanderson')

        name2 = self.p2.full_name._replace(first_name='Elliot',
                                           last_name='Roberts')
        self.p2.full_name = name2
        self.assertEqual(self.p2.first_name, name2.first_name)
        self.assertEqual(self.p2.last_name, name2.last_name)

    def test_cf_lookup(self):
        p1 = Person.objects.get(full_name=('John', 'Lennon'))
        self.assertEqual(p1.first_name, self.p1.first_name)
        self.assertEqual(p1.birthday, self.p1.birthday)

        qs = Person.objects.filter(full_name__in=[('John', 'Lennon'),
                                                  ('George', 'Harrison')])
        self.assertEqual(qs.count(), 2)
        self.assertQuerysetEqual(qs, [
            '<Person: George Harrison>',
            '<Person: John Lennon>',
        ])

    def test_cf_order(self):
        qs = Person.objects.order_by('full_name')
        str(qs.query)
        self.assertQuerysetEqual(qs, [
            '<Person: George Harrison>',
            '<Person: John Lennon>',
            '<Person: Paul McCartney>',
            '<Person: Ringo Starr>',
        ])

    def test_cf_primary_key(self):
        # Verify there's no autogenerated ``id`` field.
        self.assertRaises(FieldDoesNotExist, Person._meta.get_field, 'id')

        self.assertEqual(self.p1.pk, ('John', 'Lennon'))

        self.p2.pk = ('Joe', 'Pepitone')
        self.assertEqual(self.p2.first_name, 'Joe')
        self.assertEqual(self.p2.last_name, 'Pepitone')

        qs = Person.objects.filter(pk=('Paul', 'McCartney'))
        self.assertQuerysetEqual(qs, ['<Person: Paul McCartney>'])

        qs = Person.objects.filter(pk__in=[('John', 'Lennon'),
                                           ('George', 'Harrison')])
        self.assertEqual(qs.count(), 2)
        self.assertQuerysetEqual(qs, [
            '<Person: George Harrison>',
            '<Person: John Lennon>',
        ])

    def test_cf_pk_deletion(self):
        self.p1.delete()

        self.assertQuerysetEqual(Person.objects.all(), [
            '<Person: George Harrison>',
            '<Person: Paul McCartney>',
            '<Person: Ringo Starr>',
        ])

        qs = Person.objects.filter(full_name__in=[('George', 'Harrison'),
                                                  ('Paul', 'McCartney')])
        qs.delete()

        self.assertQuerysetEqual(Person.objects.all(), [
            '<Person: Ringo Starr>',
        ])

    def test_composite_val_string_repr(self):
        instance = MostFieldTypes.objects.create(
                bool_field=True,
                char_field="some~unpleasant, string!#%;'",
                date_field=date(2011, 7, 7),
                dtime_field=datetime(2010, 3, 4, 12, 47, 47),
                time_field=time(10, 11, 12),
                dec_field=Decimal('123.4747'),
                float_field=47.474,
                int_field=474747
        )
        unicode_repr = smart_unicode(instance.all_fields)
        self.assertEqual(unicode_repr, u"True,some~7Eunpleasant~2C string!#%;',2011-07-07,2010-03-04 12:47:47,10:11:12,123.4747,47.474,474747")
        another = MostFieldTypes(all_fields=unicode_repr)
        self.assertEqual(instance.all_fields, another.all_fields)

        # We modify the new clone a bit and save it to have something else
        # in the DB.
        another.bool_field=None
        another.char_field='Some;`).,2~other\\/unpleasant&^%#string'
        another.save()
        self.assertNotEqual(instance.pk, another.pk)

        field = MostFieldTypes._meta.get_field('all_fields')
        unpacked = field.to_python(unicode_repr)
        fetched = MostFieldTypes.objects.get(all_fields=unpacked)
        self.assertEqual(fetched.pk, instance.pk)
        self.assertEqual(fetched.all_fields, instance.all_fields)

    def test_composite_of_related_fields(self):
        tuesday = WeekDay(name='Tuesday', pos=2)
        tuesday.save()
        big_day = Sentence(sentence='? is the big day')
        big_day.save()
        tues_big_day = SentenceFreq(
            weekday=tuesday, sentence=big_day, score=210)
        tues_big_day.save()
        self.assertEqual(tues_big_day.pk, (tuesday, big_day))

